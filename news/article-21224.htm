<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://shadowrocketnode.github.io/news/article-21224.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- OG Meta Tags to improve the way the post looks when you share the page on Facebook, Twitter, LinkedIn -->
    <title>Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta name="description" content="1. 前言 因无向、无加权图的任意顶点之间的最短路径由顶点之间的边数决定，可以直接使用原始定义的广度优先搜索算法查找。 但是，无论是有向、还是无向，只要是加权图，最短路径长度的定义是：起点到终点之间所" />
    
    <!-- Favicon -->
    <link href="__ADDON__/img/shadowrocketnode/favicon.ico" rel="icon">
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/shadowrocketnode/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/shadowrocketnode/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/shadowrocketnode/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/shadowrocketnode/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-W0VHCQ1M28"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-W0VHCQ1M28');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <!-- Image Logo -->
                        <a class="navbar-brand logo-image" href="/">
                Shadowrocket Node
            </a>            
                        <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Nubis</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">链接</a>
                    </li>
                </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法</h1>
                    <p>
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                      				  				  				<h2 id="1-前言">1. 前言</h2> <p>因无向、无加权图的任意顶点之间的最短路径由顶点之间的边数决定，可以直接使用原始定义的广度优先搜索算法查找。</p> <p>但是，无论是有向、还是无向，只要是加权图，最短路径长度的定义是：起点到终点之间所有路径中权重总和最小的那条路径。</p> <p>如下图所示，A 到 C 的最短路径并不是 A 直接到 C（权重是 9），而是 A 到 B 再到 C（权重是 7）。所以，需要在广度优先搜索算法的基础上进行算法升级后才能查找到。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d28fdb5199761aedf99163fc3f2e2dfd.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <p>加权图的常用最短路径查找算法有：</p> <ul> <li>贝尔曼-福特（Bellman-Ford）算法</li> <li>Dijkstra（迪杰斯特拉） 算法</li> <li><code>A*</code> 算法</li> <li><code>D*</code> 算法</li> </ul> <h2 id="2-贝尔曼-福特bellman-ford算法">2. 贝尔曼-福特（<code>Bellman-Ford</code>）算法</h2> <p><code>贝尔曼-福特</code>算法取自于创始人<code>理查德.贝尔曼</code>和<code>莱斯特.福特</code>，本文简称<code>BF</code> 算法</p> <p><code>BF</code> 算法属于迭代、穷举算法，算法效率较低，如果图结构中顶点数量为<code>n</code>，边数为<code>m</code> ，则该算法的时间复杂度为<code>m*n</code> ，还是挺大的。</p> <p>理论上讲，图结构中边上的权重一般用来描述现实世界中的<strong>速度、时间、花费、里程</strong>……基本上都是非负数。即使是负数，<code>BF</code> 算法也能工作得较好。</p> <h3 id="21-bf-算法思想">2.1 BF 算法思想</h3> <p><strong>问题：如下图，搜索<code>A</code> 到其它任意顶点之间的最短路径。</strong></p> <p>首先给每一个顶点一个<strong>权重值</strong>（用来存储从<code>起始顶点</code>到<code>此顶点</code>的最短路径上所有边上权重之和），刚开始除了出发点的权重 0 ，因为还不能确定到其它任意顶点的具体路径长度，其它顶点的权重值均初始为无穷大（只要是一个适当值都可以）。</p> <p>下面的图结构是<code>无向加权图</code>，对于<code>有向加权图</code>同样适用<code>BF</code> 算法。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7f04159f9fb55ce694912e161af27829.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <p><strong><code>BF</code> 算法流程：</strong></p> <ul> <li> <p><strong>更新顶点的权重：</strong> 计算任一条边上一端顶点（始点）到另一个端顶点（终点）的<strong>权重</strong>。<strong>新权重=顶点（始点）权重+边的权重</strong>，然后使用<strong>新权重值</strong>更新终点的<strong>原来权重值</strong>。</p> </li> <li> <p><strong>更新原则：</strong> 只有当顶点原来的权重大于新权重时，才更新。</p> <p>如：先选择<code>A -&gt; B</code> 之间的路径，因为<code>A~B</code> 是无向边，需要计算 2 次。如果是有向图，则只计算一个方向。</p> <p>先计算<code>A -&gt; B</code> 的新权重=<code>A</code>的权重+（<code>A</code>，<code>B</code>）边上的权重，新权重=<code>0+3=3</code>。因<code>3</code> 小于<code>B</code> 顶点现在的权重（无穷大），<code>B</code> 的权重被更新为<code>3</code>。</p> <p>再计算<code>B -&gt; A</code> 的新权重=<code>B</code>的权重+(<code>A</code>，<code>B</code>) 边上的权重。新权重=<code>3+3=6</code>。<code>6</code> 大于<code>A</code> 现有的权重 0，则<code>A</code> 顶点不更新。</p> <blockquote> <p>此时，意味着<code>A -&gt; B</code> 的最短路径长度为<code>3</code>。</p> <p><strong><code>A</code> 是<code>B</code> 的前序顶点。</strong>当然，这绝对不是最后的结论。</p> </blockquote> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0552eea3881d98541804f31f2a370e33.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <ul> <li> <p>对图中每一条边两端的顶点都执行上述同样的操作，对于执行顺序没有特定要求。</p> <p>如下继续计算<code>（A，C）</code> 边的两端顶点的权重。</p> <p><code>A -&gt; C</code> 的新权重=<code>0+5=5</code>，更新<code>C</code> 顶点权重为<code>5</code>。</p> <p><code>C -&gt; A</code> 的新权重=<code>5+5=10</code> 不更新。<strong>结论：<code>A</code> 是<code>C</code> 的前序顶点。</strong></p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8caf27910590889b0727295b51428101.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <p>计算<code>（B，C）</code> 权重：</p> <p><code>B -&gt; C</code>  的新权重=<code>3+1=4</code>，小于<code>C</code> 现有权重<code>5</code> ，<code>C</code> 的权重更新为<code>4</code>，<strong>则 B 是 C的前序顶点</strong></p> <p><code>C -&gt; B</code> 的新权重=<code>4+1 =5</code> ，大于<code>B</code> 现有权重，不更新。</p> <p>经过上述操作后<code>（A，B，C）</code>3 个顶点的前序关系：</p> <p><code>A</code> 是<code>B</code> 的前序、<code>B</code> 是<code>C</code> 的前序，当前<code>A -&gt; B</code>  的最短路径是<code>3</code>，<code>A -&gt; B -&gt; C</code> 的最短路径是 4，但不一定是最后结论。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d7a13267b1a3edcacf333d84aff8fc20.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <blockquote> <p><strong>Tips：</strong> 当顶点的权重更新后，也意味着前序顶点也发生了变化。如上述权重更新过程中<code>C</code> 刚开始前序是<code>A</code>，后来又更改成了<code>B</code>。</p> </blockquote> <ul> <li> <p>当所有边两端顶点都更新完毕后，需要再重新开始，对图结构中所有边上的顶点权重再进行一次更新，一至到不再引起权重变化时<code>BF</code> 算法才算结束。</p> </li> <li> <p><code>BF</code> 算法的本质还是广度优先搜索算法，附加了更新顶点权重的逻辑。</p> </li> </ul> <h3 id="22-类结构设计">2.2 类结构设计：</h3> <blockquote> <p>本文的图结构存储使用链接表。</p> </blockquote> <p><strong>顶点类：</strong> 此类用来描述顶点本身信息，除了有顶点的常规属性，如<strong>编号、名称、链接表</strong>……外，还需要添加 2 个属性：</p> <ul> <li> <p><strong>顶点的权重：</strong>初始化时为无穷大。</p> <blockquote> <p>顶点权重用来保存起始点到此顶点的最短路径长度（边上权重之和）。</p> </blockquote> </li> <li> <p><strong>前序顶点：</strong> 在<code>BF</code> 算法中，如果顶点的权重发生了更新，也意味着前序顶点也发生了变化。</p> </li> </ul> <p><strong>初始化方法：</strong></p> <pre><code class="language-python">""" 节（顶）点类 """ import sys class Vertex:     def __init__(self, v_name, v_id=0):         # 顶点的编号         self.v_id = v_id         # 顶点的名称         self.v_name = v_name         # 是否被访问过:False 没有 True:有         self.visited = False         # 与此顶点相连接的其它顶点         self.connected_to = {}         # 前序顶点         self.preorder_vertex = None         # 权重（初始为无穷大）         self.weight = sys.maxsize</code></pre> <p><strong>添加相邻顶点方法：</strong></p> <pre><code class="language-python">    '''     添加邻接顶点     nbr_ver:相邻顶点     weight:无向无权重图，权重默认设置为 1     '''     def add_neighbor(self, nbr_ver, weight=1):         # 字典中以相邻顶点为键，权重为值         self.connected_to[nbr_ver] = weight              '''     判断给定的顶点是不是当前顶点的相邻顶点     '''     def is_neighbor(self, nbr_v):         return nbr_v in self.connected_to</code></pre> <p><strong>顶点对象以字符串格式输出：</strong></p> <pre><code class="language-python">    '''     显示与当前顶点相邻的其它顶点     '''       def __str__(self):        	return '权重{0}:名称{1}顶点相邻的顶点有:{2}'.format(self.weight, self.v_name,                                                 str([(key.v_name, val) for key, val in self.connected_to.items()]))</code></pre> <p><strong>顶点权重更新方法：</strong></p> <pre><code class="language-python">    '''     得到和某一个相邻顶点的权重     '''     def get_weight(self, nbr_v):         return self.connected_to[nbr_v]      '''     计算顶点权重（路径长度）     '''     def cal_bf_weight(self, nbr_v):         # 顶点权重加上顶点间边的权重         new_weight = self.weight + self.get_weight(nbr_v)         if new_weight &lt; nbr_v.weight:             # 计算出来权重小于顶点原来权重，则更新             nbr_v.weight = new_weight             # 设置前序顶点             nbr_v.preorder_vertex = self             return 1         return 0</code></pre> <p>上述方法为<code>BF</code> 算法的关键，参数<code>nbr_v</code> 是指与当前顶点相邻的顶点。先是计算和当前顶点的新权重，根据<strong>更新原则</strong>进行更新。如果有更新则需要把当前顶点指定为前序顶点。</p> <blockquote> <p><strong>Tips：</strong> 在图结构中，最短路径算法中的前序顶点指到达此顶点最近的顶点。</p> </blockquote> <p><strong>图类：</strong> 此类用来对图中的顶点进行维护，如添加新顶点，维护顶点之间的关系、提供搜索算法……</p> <p><strong>初始化方法：</strong></p> <pre><code class="language-python">class Graph:     def __init__(self):         # 一维列表，保存节点         self.vert_list = {}         # 顶点个数         self.v_nums = 0         # 使用队列模拟队列或栈，用于路径搜索算法         self.queue_stack = []         # 保存已经更新过的边         self.is_update = []</code></pre> <p><strong>添加新顶点：</strong> 新顶点的编号由内部提供，统一管理，保证编号的一致性。</p> <pre><code class="language-python">    def add_vertex(self, vert):         if vert.v_name in self.vert_list:             # 已经存在             return         # 顶点的编号内部生成         vert.v_id = self.v_nums         # 所有顶点保存在图所维护的字典中，以顶点名为键，顶点对象为值         self.vert_list[vert.v_name] = vert         # 数量增一         self.v_nums += 1</code></pre> <p><strong>查询顶点：</strong></p> <pre><code class="language-python">    '''     根据顶点名找到顶点对象     '''     def find_vertex(self, v_name):         if v_name in self.vert_list:             return self.vert_list.get(v_name)     '''     查询所有顶点     '''     def find_vertexes(self):         return [str(ver) for ver in self.vert_list.values()]</code></pre> <p><strong>添加顶点与顶点之间的关系：</strong> 此方法是一个封装方法，本质是调用顶点自身的添加相邻顶点方法。这里用到了递归算法，在 BF  算法中，一轮更新后可能还需要后续多轮更新才能让每一个顶点上的权重不再变化。这也是 BF 算法的缺陷。</p> <pre><code class="language-python">    '''     添加节点与节点之间的关系（边），     如果是无权重图，统一设定为 1      '''      def add_edge(self, from_v, to_v, weight=1):         # 如果节点不存在         if from_v not in self.vert_list:             self.add_vertex(from_v)         if to_v not in self.vert_list:             self.add_vertex(to_v)         from_v.add_neighbor(to_v, weight)</code></pre> <p><strong>贝尔曼-福特算法：</strong>  图结构中 BF 算法的实现。</p> <pre><code class="language-python">    '''     贝尔曼-福特算法     '''     def bf_nearest_path(self, from_v):         # 记录边更新次数         update_count = 0         # 设备起始点的权重为 0         from_v.weight = 0         # 起始点压入队列         self.queue_stack.append(from_v)         # 检查队列是否为空         while len(self.queue_stack) != 0:             # 从队列获取顶点             tmp_v = self.queue_stack.pop(0)             # 标记为已经处理             tmp_v.visited = True             # 得到与其相邻顶点             nbr_vs = tmp_v.connected_to.keys()             # 更新与其相邻顶点的权重             for v_ in nbr_vs:                 # 把相邻顶点压入队列                 self.push_queue(v_)                 # 更新权重，并记录更新次数                 update_count += tmp_v.cal_bf_weight(v_)                 # 无向边，要双向更新                 update_count +=v_.cal_bf_weight(tmp_v)         # 更新完毕后，如果更新次数为 0 ，则不用再更新。         if update_count != 0:             self.is_update = []             self.bf_nearest_path(from_v)      '''      把某一顶点的相邻顶点压入队列      这里还是使用广度优先算法思路保存下一个需要搜索的顶点      '''     def push_queue(self, vertex):         # 获取 vertex 顶点的相邻顶点         for v_ in vertex.connected_to.keys():             # 检查此顶点是否压入过             if v_.visited:                 continue             self.queue_stack.append(v_)</code></pre> <p><strong>测试<code>BF</code> 算法：</strong></p> <pre><code class="language-python">if __name__ == '__main__':     # 初始化图     graph = Graph()     # 添加节点     for v_name in ['A', 'B', 'C', 'D', 'E', 'F']:         v = Vertex(v_name)         graph.add_vertex(v)      # 添加顶点之间关系     v_to_v = [('A', 'B', 3), ('A', 'C', 5), ('B', 'C', 1), ('B', 'D', 2), ('B', 'E', 4), ('C', 'E', 6), ('D', 'E', 7),               ('D', 'F', 8),               ('E', 'F', 3)]     # 无向图每 2 个顶点之间互为关系     for v in v_to_v:         f_v = graph.find_vertex(v[0])         t_v = graph.find_vertex(v[1])         graph.add_edge(f_v, t_v, v[2])         graph.add_edge(t_v, f_v, v[2])      # 输出所有顶点     print('-----------顶点及顶点之间的关系-------------')     for v in graph.find_vertexes():         print(v)      # 查找起始点到任一顶点之间的最短路径长度     f_v = graph.find_vertex('A')     graph.bf_nearest_path(f_v)      print('-----------BF 算法后顶点及顶点之间的关系-------------')     for v in graph.find_vertexes():         print(v)      # 查询从起始点到任意顶点间的最短路径长度     print('----------f_v~t_v 最短路径长度------------')     for name in ['B', 'C', 'D', 'E', 'F']:         t_v = graph.find_vertex(name)         path = [t_v]          while True:             v = t_v.preorder_vertex             path.insert(0, v)             if v.v_id == f_v.v_id:                 break             t_v = v         print([(v.v_name, v.weight) for v in path])</code></pre> <p><strong>测试结果：</strong></p> <pre><code class="language-python">-----------顶点及顶点之间的关系------------- 权重9223372036854775807:名称A顶点相邻的顶点有:[('B', 3), ('C', 5)] 权重9223372036854775807:名称B顶点相邻的顶点有:[('A', 3), ('C', 1), ('D', 2), ('E', 4)] 权重9223372036854775807:名称C顶点相邻的顶点有:[('A', 5), ('B', 1), ('E', 6)] 权重9223372036854775807:名称D顶点相邻的顶点有:[('B', 2), ('E', 7), ('F', 8)] 权重9223372036854775807:名称E顶点相邻的顶点有:[('B', 4), ('C', 6), ('D', 7), ('F', 3)] 权重9223372036854775807:名称F顶点相邻的顶点有:[('D', 8), ('E', 3)] -----------BF 算法后顶点及顶点之间的关系------------- 权重0:名称A顶点相邻的顶点有:[('B', 3), ('C', 5)] 权重3:名称B顶点相邻的顶点有:[('A', 3), ('C', 1), ('D', 2), ('E', 4)] 权重4:名称C顶点相邻的顶点有:[('A', 5), ('B', 1), ('E', 6)] 权重5:名称D顶点相邻的顶点有:[('B', 2), ('E', 7), ('F', 8)] 权重7:名称E顶点相邻的顶点有:[('B', 4), ('C', 6), ('D', 7), ('F', 3)] 权重10:名称F顶点相邻的顶点有:[('D', 8), ('E', 3)] ----------起始点到任意顶点之间的最短路径长度------------ # A-&gt;B 最短路径长度 3 [('A', 0), ('B', 3)]    # A-&gt;B-&gt;C 最短路径长度为 4 [('A', 0), ('B', 3), ('C', 4)] # A-&gt;B-&gt;D 最短路径长度为 5 [('A', 0), ('B', 3), ('D', 5)] # A-&gt;B-&gt;E 最短路径长度为 7 [('A', 0), ('B', 3), ('E', 7)] # A-&gt;B-&gt;E-&gt;F 最短路径长度为 10 [('A', 0), ('B', 3), ('E', 7), ('F', 10)]</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a3ad4a1ff4f1a502b1fcba81e94eae9c.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <h2 id="3-dijkstra迪杰斯特拉算法">3.<code>Dijkstra</code>（迪杰斯特拉）算法</h2> <p><code>迪杰斯特拉</code>算法(<code>Diikstra</code>) 是由荷兰计算机科学家<code>狄克斯特拉</code>于1959 年提出的，因此又叫<code>狄克斯特拉算法</code>。为了便于表述，本文简称<code>DJ</code> 算法。</p> <p><code>DJ</code> 算法和前面所聊的<code>BF</code> 算法，可谓同工异曲，算法的核心思想是相同的：</p> <ul> <li> <p><strong>搜索到某一个顶点后，更新与其相邻顶点的权重</strong>。</p> <blockquote> <p>权重计算法则以及权重更新原则两者相同。</p> </blockquote> </li> <li> <p><strong>且顶点权重的数据含义和<code>BF</code> 算法的一样</strong>。表示从起始点到此点的最短路径长度（也就是经过的所有边的权重之和）。</p> <blockquote> <p>初始时，因还不能具体最短路径，起始点的权重为 0 ，其它顶点权重可设置为无穷大。</p> </blockquote> </li> </ul> <p><code>DJ</code> 算法相比较<code>BF</code> 算法有<code>2</code> 个不同的地方：</p> <ul> <li> <p>在无向加权图中，<code>BF</code> 算法需要对相邻<code>2</code> 个顶点进行双向权重计算。</p> </li> <li> <p><code>DJ</code> 算法搜索时，每次选择的下一个顶点是所有权重值最小的顶点。<strong>其思想是保证每一次选择的顶点和当前顶点权重都是最短的。</strong></p> <p>如下图结构中,查找<code>A</code> 到任一顶点的最短路径：</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8a2819b523a4bb3aa50f9b1ffcd9051a.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <ol> <li><strong>定位到起始点<code>A</code> ，<code>A</code> 顶点也称为<code>当前顶点</code>。</strong></li> </ol> <p>设置<code>A</code> 的权重为 0，<code>A</code> 的相邻顶点有<code>B</code> 和<code>C</code>，需要计算<code>A</code> 到<code>B</code> 以及<code>A</code> 到<code>C</code> 之间的权重。这里是先选择<code>B</code> 还是<code>C</code> 并不重要。</p> <p>先选择<code>B</code> 顶点，计算<code>A -&gt; B</code> 的路径长度权重。<strong>新权重计算公式＝<code>A</code>顶点权重＋<code>（A，B）</code>边的权重＝０＋３＝３</strong>．</p> <p>更新原则和<code>BF</code> 算法一样，当计算出来的权重值小于相邻顶点的权重值时，更新。于是<code>B</code> 的权重更新为<code>３</code>．此时<code>A</code> 是<code>B</code> 的前序顶点。</p> <p>再选择<code>C</code>  顶点，计算<code>A -&gt; C</code> 路径长度权重＝０＋9＝9，因 9 小于<code>C</code> 现在的无穷大权重，<code>C</code> 的权重被更新为 9．</p> <blockquote> <p>到这里， 可以说<code>DJ</code> 算法和<code>BF</code> 算法没有什么不一样。</p> </blockquote> <p>但是，<code>DJ</code> 算法不需要对边上 2 个顶点进行双向权重计算，<strong>这是<code>DJ</code> 算法与<code>BF</code> 算法的第一个差异性。</strong></p> <p>此时，更新后的图结构如下所示:</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1c5f7ac1747a3a8f1a9371a873c0a97b.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <p>很显然，<code>B</code> 和<code>C</code> 将成为下一个搜索的候选点，这里<code>DJ</code> 算法和<code>BF</code> 算法就有了很大的差异性。</p> <p><strong><code>BF</code> 算法对于选择<code>B</code> 还是<code>C</code> 的顺序没有要求。</strong></p> <p><strong><code>DJ</code> 算法则不同，会选择<code>B</code> 和<code>C</code> 中权重值更小的那个，<code>B</code> 的权重 3 小于<code>C</code> 的权重 9 ，当然选择<code>B</code> 为下一个搜索顶点。</strong></p> <p><strong>这是 BF 算法和 DJ 算法的第二个差异性！</strong></p> <p>选择<code>B</code> 后也就意味着<code>A-&gt;B</code> 之间的最短路径就确定了。为什么？</p> <p>因你无法再找出一条比之更短的路径。</p> <p><strong>这里也是<code>DJ</code> 算法的关键思想，在选择一个权重最小的候选顶点后，就能确定此顶点和它的前序顶点之间的最短路径长度。</strong></p> <blockquote> <p>到现在为止， B 的前序顶点是 A；C 的前序顶点也是 A 。</p> <p>因为 B 已经被选为下一个搜索顶点，于是 B 顶点和它的前序顶点 A 之间的最短路径已经出来了。</p> <p>A－＞Ｂ　最短路径长度为 ３。</p> <p>而 C 顶点还没有成为搜索顶点，其和 A 顶点之间的最短路径还是一个未知数。</p> </blockquote> <ol start="2"> <li>**Ｂ成为当前顶点 **</li> </ol> <p>找到与<code>B</code> 相邻的<code>C</code>、<code>D</code>、<code>E</code> ３个顶点，然后分别计算路径长度权重。</p> <p><code>B-&gt;C</code> 的新权重=３+4＝７ 小于<code>C</code> 现有的权重  ９ ，C 的权重被更新为 ７ ，<strong>C 的前序顶点也变成了 B</strong>。</p> <p>同理，<code>B-&gt;D</code> 路径中<code>D</code> 的权重被更新为 5；<code>B-&gt;E</code> 路径中<code>E</code> 的权重被更新为 ６ 。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d0aea4103bb36c3eeb1518c85f583bff.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <p>再在<code>C</code>、<code>D</code>、<code>E</code> 3 个顶点中选择权重值最小的<code>D</code> 为下一个搜索顶点．到这里！可以发现<code>DJ</code> 算法和原始定义的广度搜索算法以及<code>BF</code> 之间就有了本质上的区别：</p> <ul> <li>广度优先搜索算法会选择和<code>B</code> 同时进入队列的<code>C</code> 顶点成为下一个搜索顶点。因为 B 和 C  都是离 A 较近的顶点。</li> <li>而<code>DJ</code> 算法是在候选顶点中，哪一个顶点的权重最少，就选择谁，不采用就近原则．而是以顶点的权重值小作为优先选择条件．</li> </ul> <blockquote> <p>选择 D 后 ，各顶点间的关系：</p> <p>B 的前序是 A，（Ａ，Ｂ）间最短路径已经确定。</p> <p>D 的前序是 B ，（Ｂ，Ｄ）间的最短路径可以确定，又因为 B 的前序顶点是 A ，所以 A－＞B－＞D 的最短路径可以确定。</p> <p>其它项点间的最短路径暂时还不明朗。</p> </blockquote> <ol start="3"> <li><strong>D 顶点为当前顶点</strong></li> </ol> <p>计算与<code>D</code> 相邻的<code>E、F</code> 顶点的权重。</p> <p><code>D-&gt;E</code> 的新权重=5+7=12 大于<code>E</code> 现有权重 6 ，不更新。<strong><code>E</code> 的前序顶点还是<code>B</code>。</strong></p> <p><code>D-&gt;F</code> 的新权重=5+8=13 ，<code>F</code> 的权重由无穷大更新为<code>13</code>。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/34ed9c1981aacd16e7577d291a95b9fd.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <p>再在省下的所有可选顶点中选择权重值小的 E 顶点为下一个搜索点，当选择 E 后：</p> <blockquote> <p>E  的前序为 B , B 的前序是 A，所以 A 到 E 的最短路径长度就是 A-&gt;B-&gt;C ，路径长度为 6。</p> </blockquote> <ol start="4"> <li><strong>E 为当前顶点，计算和其相邻顶点间的权重。</strong></li> </ol> <p>唯一可改变的是<code>F</code> 顶点的权重，<code>F</code> 顶点的前序顶点变为<code>E</code>。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6a008f9fb7d4ff055d30c309b07599d6.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <ol start="5"> <li><strong>再选择 C 为当前顶点</strong></li> </ol> <p><code>C</code> 和相邻顶点不会再产生任何权重的变化，其前序顶点还是<code>B</code>。</p> <p>所以<code>A</code> 到<code>C</code> 之间的最短路径应该是<code>A-&gt;B-&gt;C</code> 路径长度为 7。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/66fc0cecfc22965a53943cf65d7b7393.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <p>最后选择<code>F</code> 顶点，也不会再产生任何权重变化，<code>F</code> 的前序是<code>E</code>，<code>E</code>的前序是<code>B</code>，<code>B</code>的前序是<code>A</code>，所<code>A</code> 到<code>F</code> 的最短路径应该是<code>A-&gt;B-&gt;E-&gt;F</code> 权重值为 9。</p> <p>最后，以图示方式，比较<code>BF</code> 算法和<code>DJ</code> 算法中各顶点出队列的顺序：</p> <p><code>BF</code> 采用就近原则出队列，然后不停计算相邻顶点的权重，至到权重不再变化为止，显然用的是蛮力。</p> <p><code>DJ</code> 采用权重值小的优先出队列，显然用的是巧力。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f5ba60c0bedf47a371c5540e970e65ff.jpg" alt="Python 图_系列之纵横对比  Bellman-Ford 和  Dijkstra 最短路径算法"></p> <p><strong>分析完 DJ 算法的流程，现在编写代码：</strong></p> <p>和上面的 BF 算法相比较，顶点类一样，在图类中添加 DJ 算法：</p> <p>DJ 算法的本质还是广度优先搜索算法，有所区别的地方是使用<strong>优先队列</strong>，每次从队列中选择顶点时，选择顶点权重最小的。</p> <p>所以在图类中，需要修改或重载一个候选顶点入队列的方法：</p> <pre><code class="language-python">    '''      把当前顶点的相邻顶点压入队列      '''     def push_queue_dj(self, vertex):         # 获取 vertex 顶点的相邻顶点         for v_ in vertex.connected_to.keys():             # 检查此顶点是否压入过             if v_.visited:                 continue             # vertex.visited = True             self.queue_stack.append(v_)         # 对队列按顶点权重排序,保证权重值小的排在前面。是 DJ 算法的关键         self.queue_stack.sort(key=lambda v: v.weight)              '''     检查边是否已经更新过     DJ 算法中已经更新过的边不需要再更新     '''     def is_updated(self, *edge):         s = ord(edge[0].v_name) + ord(edge[1].v_name)         for e in self.is_update:             s1 = ord(e[0].v_name) + ord(e[1].v_name)             if s == s1:                 return True         return False</code></pre> <p><strong>实现<code>DJ</code> 算法：</strong></p> <pre><code class="language-python">	'''     Dijkstra（迪杰斯特拉）算法      '''     def dj_nearest_path(self, from_v):         # 设备起始点的权重为 0         from_v.weight = 0         # 起始点压入队列         self.queue_stack.append(from_v)         # 检查队列是否为空         while len(self.queue_stack) != 0:             # 从队列获取顶点             tmp_v = self.queue_stack.pop(0)             # 标记为已经处理             tmp_v.visited = True             # 得到与其相邻所有顶点             nbr_vs = tmp_v.connected_to.keys()             # 更新与其相邻顶点的权重             for v_ in nbr_vs:                 # 边是否已经处理                 if self.is_updated(tmp_v, v_):                     continue                 # 更新权重                 tmp_v.cal_bf_weight(v_)                 # 记录已经更新过                 self.is_update.append((tmp_v, v_))                 # 把相邻顶点压入队列                 self.push_queue_dj(v_)</code></pre> <p>测试代码：</p> <pre><code class="language-python">if __name__ == '__main__':     # 初始化图     graph = Graph()     # 添加节点     for v_name in ['A', 'B', 'C', 'D', 'E', 'F']:         v = Vertex(v_name)         graph.add_vertex(v)      # 添加顶点之间关系     v_to_v = [('A', 'B', 3), ('A', 'C', 9), ('B', 'C', 4), ('B', 'D', 2), ('B', 'E', 3), ('C', 'E', 6), ('D', 'E', 7),               ('D', 'F', 8),               ('E', 'F', 3)]     # 无向图每 2 个顶点之间互为关系     for v in v_to_v:         f_v = graph.find_vertex(v[0])         t_v = graph.find_vertex(v[1])         graph.add_edge(f_v, t_v, v[2])         graph.add_edge(t_v, f_v, v[2])      # 输出所有顶点     print('-----------顶点及顶点之间的关系-------------')     for v in graph.find_vertexes():         print(v)      # 查找起始点到任一顶点之间的最短路径长度     f_v = graph.find_vertex('A')     # DJ 算法     graph.dj_nearest_path(f_v)      print('----------- DJ 算法后顶点及顶点之间的关系-------------')     for v in graph.find_vertexes():         print(v)      #     print('----------f_v~t_v 最短路径长度------------')     for name in ['B', 'C', 'D', 'E', 'F']:         t_v = graph.find_vertex(name)         path = [t_v]          while True:             # 找到前序顶点             v = t_v.preorder_vertex             path.insert(0, v)             if v.v_id == f_v.v_id:                 break             t_v = v         print([(v.v_name, v.weight) for v in path])</code></pre> <p><strong>输出结果：</strong></p> <pre><code class="language-python">-----------顶点及顶点之间的关系------------- 权重9223372036854775807:名称A顶点相邻的顶点有:[('B', 3), ('C', 9)] 权重9223372036854775807:名称B顶点相邻的顶点有:[('A', 3), ('C', 4), ('D', 2), ('E', 3)] 权重9223372036854775807:名称C顶点相邻的顶点有:[('A', 9), ('B', 4), ('E', 6)] 权重9223372036854775807:名称D顶点相邻的顶点有:[('B', 2), ('E', 7), ('F', 8)] 权重9223372036854775807:名称E顶点相邻的顶点有:[('B', 3), ('C', 6), ('D', 7), ('F', 3)] 权重9223372036854775807:名称F顶点相邻的顶点有:[('D', 8), ('E', 3)] ----------- DJ 算法后顶点及顶点之间的关系------------- 权重0:名称A顶点相邻的顶点有:[('B', 3), ('C', 9)] 权重3:名称B顶点相邻的顶点有:[('A', 3), ('C', 4), ('D', 2), ('E', 3)] 权重7:名称C顶点相邻的顶点有:[('A', 9), ('B', 4), ('E', 6)] 权重5:名称D顶点相邻的顶点有:[('B', 2), ('E', 7), ('F', 8)] 权重6:名称E顶点相邻的顶点有:[('B', 3), ('C', 6), ('D', 7), ('F', 3)] 权重9:名称F顶点相邻的顶点有:[('D', 8), ('E', 3)] ----------f_v~t_v 最短路径长度------------ [('A', 0), ('B', 3)] [('A', 0), ('B', 3), ('C', 7)] [('A', 0), ('B', 3), ('D', 5)] [('A', 0), ('B', 3), ('E', 6)] [('A', 0), ('B', 3), ('E', 6), ('F', 9)]</code></pre> <p>DJ 算法不适合用于边上权重为负数的图中，否则可能找不到路径。</p> <h2 id="3-总结">3. 总结</h2> <p>在加权图中查找最短路径长度算法除了 BF、DJ 算法，还有 A* 算法 D* 算法。有兴趣的可以自行了解。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-20767.htm">动物医院的英文单词是什么怎么写 动物医院的英文单词是什么怎么写的</a></p>
                                        <p>下一个：<a href="/news/article-21227.htm">立德生物科技有限公司（立德药业）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-29-node-share.htm" title="「11月29日」最高速度21.5M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接">「11月29日」最高速度21.5M/S，2024年V2ray/Shadowrocket/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-31-node-share-links.htm" title="「7月31日」最高速度22.4M/S，2024年V2ray/Shadowrocket/SSR/Clash每天更新免费节点订阅链接">「7月31日」最高速度22.4M/S，2024年V2ray/Shadowrocket/SSR/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-25-free-high-speed-nodes.htm" title="「11月25日」最高速度18.7M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费节点订阅链接">「11月25日」最高速度18.7M/S，2024年SSR/Clash/V2ray/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-10-free-node-subscribe.htm" title="「10月10日」最高速度22.2M/S，2024年Shadowrocket/SSR/Clash/V2ray每天更新免费节点订阅链接">「10月10日」最高速度22.2M/S，2024年Shadowrocket/SSR/Clash/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-24-free-shadowrocket-node.htm" title="「10月24日」最高速度18.1M/S，2024年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接">「10月24日」最高速度18.1M/S，2024年Shadowrocket/V2ray/Clash/SSR每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-6-26-free-clash.htm" title="「6月26日」最高速度19.3M/S，2024年V2ray/SSR/Shadowrocket/Clash每天更新免费节点订阅链接">「6月26日」最高速度19.3M/S，2024年V2ray/SSR/Shadowrocket/Clash每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-6-node-share-links.htm" title="「12月6日」最高速度22.8M/S，2024年Clash/V2ray/SSR/Shadowrocket每天更新免费节点订阅链接">「12月6日」最高速度22.8M/S，2024年Clash/V2ray/SSR/Shadowrocket每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-3-clash-v2ray-ss-ssr.htm" title="「12月3日」最高速度20.4M/S，2024年Shadowrocket/SSR/Clash/V2ray每天更新免费节点订阅链接">「12月3日」最高速度20.4M/S，2024年Shadowrocket/SSR/Clash/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-24-free-ssr-subscribe.htm" title="「9月24日」最高速度22.6M/S，2024年Shadowrocket/SSR/Clash/V2ray每天更新免费节点订阅链接">「9月24日」最高速度22.6M/S，2024年Shadowrocket/SSR/Clash/V2ray每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-15-free-subscribe-node.htm" title="「10月15日」最高速度21.6M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接">「10月15日」最高速度21.6M/S，2024年SSR/Clash/Shadowrocket/V2ray每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">7</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
        <!-- Copyright -->
    <div class="copyright bg-gray">
        <div class="container">
            <div class="row">
                <p class="p-small">
                    <a href="/">ShadowrocketNode官网订阅站</a> 版权所有 Powered by WordPress
                </p>
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img href="/assets/website/img/shadowrocketnode/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/shadowrocketnode/jquery-3.3.1.min.js"></script>
    <script src="/assets/website/js/frontend/shadowrocketnode/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/shadowrocketnode/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/shadowrocketnode/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>